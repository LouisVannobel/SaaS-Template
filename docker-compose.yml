version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: saas_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: saas_frontend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - saas_network

  postgres:
    image: postgres:16-alpine
    container_name: saas_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-saas_db}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - saas_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-saas_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  saas_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
